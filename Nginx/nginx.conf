# # worker_processes 1;
# include api_backends.conf;

# events {
#     worker_connections 1024;
# }

# http {
#     sendfile on;

#     upstream api {
#         server demodocker.api:8081;
#     }


#     server {
#         listen 80;
#         server_name localhost;

#         location / {
#             return 301 https://$host$request_uri;
#         }
#     }


#     server {
#         listen 443 ssl;
#         server_name localhost;

#         ssl_certificate /etc/ssl/certs/localhost.crt;
#         ssl_certificate_key /etc/ssl/private/localhost.key;










#         location /AddTodo {
#             # auth_request /auth;
#             proxy_pass https://demodocker.api:443/api/Todoes;
#             #  proxy_read_timeout     60;
#             proxy_connect_timeout 300;
#             #    // proxy_pass http://backend:8080;
#             proxy_redirect default;
#             proxy_set_header Host $host;
#         }
#         location /Todoes {
#             # auth_request /auth;
#             proxy_pass https://demodocker.api:443/api/Todoes;
#             #  proxy_read_timeout     60;
#             proxy_connect_timeout 300;
#             #    // proxy_pass http://backend:8080;
#             proxy_redirect default;
#             proxy_set_header Host $host;
#         }

#  location /getTodoById/ {
#             # auth_request /auth;
#             proxy_pass https://demodocker.api:443/api/Todoes;
#             #  proxy_read_timeout     60;
#             proxy_connect_timeout 300;
#             #    // proxy_pass http://backend:8080;
#             proxy_redirect default;
#             proxy_set_header Host $host;
#         }






#             # Error responses
#     error_page 404 = @400;         # Treat invalid paths as bad requests
#     proxy_intercept_errors on;     # Do not send backend errors to client
#     include api_json_errors.conf;  # API client-friendly JSON errors
#     default_type application/json; # If no content-type, assume JSON
     
#     }
# }







user  nginx;
worker_processes  3;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

load_module /etc/nginx/modules/ngx_http_js_module.so;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    log_format compression '$remote_addr - $remote_user [$time_local] '
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent"'
                            'rt=$request_time uct="$upstream_connect_time" uht="$upstream_header_time" urt="$upstream_response_time" ';
                            #  resp_body:"$resp_body"';


    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    include /etc/nginx/api_gateway.conf; # All API gateway configuration
    include /etc/nginx/conf.d/*.conf;    # Regular web traffic
}